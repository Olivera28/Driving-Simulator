/* UDP SERVER CODE - MKR WIFI 1010
   Team DK
   Server code for MKR WIFI 101 Arduino board. Receives UDP Packets from client and parses packet for gear
   velocity, and turn angle
*/

#include <SPI.h>
#include <WiFiNINA.h>
#include <WiFiUdp.h>
#define pwmVideo 0 

#include <Servo.h> 

Servo velServo; 
Servo turnServo;

// Set WiFi credentials
#define WIFI_SSID "iot_lab"
#define WIFI_PASS "44FEC4DDB9"
//#define UDP_PORT 2390  // local port to listen on

int status = WL_IDLE_STATUS;
unsigned int localPort = 2390;      // local port to listen on
//UDP
WiFiUDP Udp;

// Packet struct for receiving gear, velocity (vel), and angle of turn (turn)
struct UdpPacket{
  char gear = 'p';
  double vel = 0.0;
  int turn = 0;
}packet;

char packetBuffer[255]; //buffer to hold incoming packet
char  ReplyBuffer[] = "acknowledged";       // a string to send back


void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);

  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    //Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();

  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    //Serial.println("Please upgrade the firmware");
  }

  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    //Serial.print("Attempting to connect to SSID: ");
    //Serial.println(WIFI_SSID);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(WIFI_SSID, WIFI_PASS);
    // wait 10 seconds for connection:
    delay(10000);
  }

  Serial.println("Connected to wifi");
  printWifiStatus();
  Serial.println("\nStarting connection to server...");

  // if you get a connection, report back via serial:
  Udp.begin(localPort);

  //Initializing data for the RC car motors
  pinMode(pwmVideo,OUTPUT);
  turnServo.attach(7,1000,2000);
  delay(1);
  velServo.attach(11,1000,2000); //PWM Pin Connection //20ms  
  delay(1);
  turnServo.write(105);
  velServo.write(90); //DO NOT CHANGE! Require to activate ESC
  delay(5000);       //Mandatory Wait Time 

}

void loop() {
  //IPAddress remoteIP(10,144,113,83); //IP address for WiFi connection
  // IPAddress remoteIP = Udp.remoteIP();
  // Serial.println(remoteIP);
  // if there's data available, read a packet
  int packetSize = Udp.parsePacket();

  if (packetSize) {
    //Prints Packet size
    // Serial.print("Received packet of size ");
    // Serial.println(packetSize);
    // Serial.print("From ");

    IPAddress remoteIp = Udp.remoteIP();
    // Serial.print(remoteIp);
    // Serial.print(", port ");
    // Serial.println(Udp.remotePort());
    
    // read the packet into packetBufffer
    int len = Udp.read(packetBuffer, 256);
    if (len > 0) {
      packetBuffer[len] = 0;
    }

    // Copys gear, velocity and turn angle data to packet struct
    memcpy(&packet.gear, packetBuffer, sizeof(packet.gear));
    memcpy(&packet.vel, packetBuffer+sizeof(packet.gear), sizeof(packet.vel));
    memcpy(&packet.turn, packetBuffer+sizeof(packet.gear)+sizeof(packet.vel), sizeof(packet.turn));

    controlRC();
    //Prints received values
    Serial.print("Gear:");    
    Serial.print(packet.gear);
    Serial.print(",");
    Serial.print("Velocity:");
    Serial.print(packet.vel);
    Serial.print(",");
    Serial.print("Turning:");
    Serial.println(packet.turn);

    // Send a reply, to the IP address and port that sent us the packet we received
    Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
    Udp.write(ReplyBuffer);
    Udp.endPacket();
  }
}


void controlRC(){
  if(packet.gear == 'p'){
    turnServo.write(packet.turn);
    velServo.write(90);      
  }

  if(packet.gear == 'd'){
    analogWrite(pwmVideo,100);
    turnServo.write(packet.turn);
    velServo.write(packet.vel);
  }
  if(packet.gear == 'r'){
    analogWrite(pwmVideo,200);
    turnServo.write(packet.turn);
    velServo.write(packet.vel);
  }

}



void printWifiStatus() {

  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
