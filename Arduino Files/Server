/* UDP SERVER CODE - MKR WIFI 1010
   Team DK
   Server code for MKR WIFI 101 Arduino board. Receives UDP Packets from client and parses packet for gear
   velocity, and turn angle
*/

#include <SPI.h>
#include <WiFiNINA.h>
#include <WiFiUdp.h>

int status = WL_IDLE_STATUS;
///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = "SSID";        // your network SSID (name)
char pass[] = "PASSWORD";    // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;            // your network key Index number (needed only for WEP)

unsigned int localPort = 2390;      // local port to listen on

char packetBuffer[30]; //buffer to hold incoming packet
char  ReplyBuffer[] = "acknowledged";       // a string to send back

//  Gas Pedal Variables
const float MAX_SPEED = 132.0;
const float MIN_ACCELERATION = 0.00005;

float velocity = 0.0;
float acceleration = 0;

//UDP
WiFiUDP Udp;

// Packet struct for receiving gear, velocity (vel), and angle of turn (turn)
struct UdpPacket{
  char gear = 'p';
  double vel = 0.0;
  int turn = 0;
}packet;

void setup() {

  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  
  // Gas Pedal Potentiometer
  pinMode (A1, INPUT);

  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");

    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();

  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println("Please upgrade the firmware");
  }

  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);

    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }

  Serial.println("Connected to wifi");
  printWifiStatus();
  Serial.println("\nStarting connection to server...");

  // if you get a connection, report back via serial:
  Udp.begin(localPort);
}

void loop() {
  // Reads Pedal Values
  acceleration = analogRead(A1);

  // Maps potentiometer to acceleration values
  acceleration = map(acceleration, 0, 666, 0, 617);
  acceleration = acceleration / 1000;

  Serial.print("Acceleration:");
  Serial.print(acceleration,10);

  // Accelerates car past a specefic threshold up to a max speed
  if (acceleration > MIN_ACCELERATION && velocity <= MAX_SPEED){
    velocity += acceleration;
  }

  // stops car at low enough velocity
  if (velocity < .175){
    velocity = 0.0;
  }

  // Decelerates if not accelerating
  if (acceleration < MIN_ACCELERATION && velocity > .175){
    velocity -= .175;
  }

  Serial.print(",");
  Serial.print("Velocity:");
  Serial.println(velocity);

  delay(10);


  // if there's data available, read a packet
  int packetSize = Udp.parsePacket();

  if (packetSize) {
    // Prints Packet size
    Serial.print("Received packet of size ");
    Serial.println(packetSize);
    Serial.print("From ");

    // Retrives received packet ip for acknowledge packet
    IPAddress remoteIp = Udp.remoteIP();

    Serial.print(remoteIp);
    Serial.print(", port ");
    Serial.println(Udp.remotePort());

    // read the packet into packetBufffer
    int len = Udp.read(packetBuffer, 30);

    if (len > 0) {
      packetBuffer[len] = 0;
    }

    // Copys gear, velocity and turn angle data to packet struct
    memcpy(&packet.gear, packetBuffer, sizeof(packetBuffer));
    memcpy(&packet.vel, packetBuffer+sizeof(packet.gear), sizeof(packetBuffer));

    // Prints received values
    Serial.println(packet.gear);
    Serial.println(packet.vel);
    Serial.println(packet.turn);

    // Send a reply, to the IP address and port that sent us the packet we received
    Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
    Udp.write(ReplyBuffer);
    Udp.endPacket();
  }
}

void printWifiStatus() {

  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}
