/* UDP CLIENT CODE - MKR WIFI 1010
   Team DK
   Client code for MKR WIFI 101 Arduino board. Sends gear, velocity, and turn angle data in a UDP packet to a remote 
   MKR WIFI 1010 board over a WiFi connection
*/

//Declaration of variables for the steering wheel data

//DC motor pins
#define pwmA 0 
#define STBY 8 
#define AIN1 6 
#define AIN2 7 

//Rotary encoder pins 
#define ENC_A 1 //10
#define ENC_B 2 //11

// Gas Pedal Pin
#define GAS A1

// Brake Pedal Pin
#define BRAKE A2
// //----------------------------------------------------------------------
#include <SPI.h>          // needed for Arduino versions later than 0018
#include <WiFiNINA.h>
#include <WiFiUdp.h>  

// Set WiFi credentials
#define WIFI_SSID "iot_lab"
#define WIFI_PASS "44FEC4DDB9"

#define UDP_PORT 2390
int status = WL_IDLE_STATUS;

//  Gas Pedal Variables
const float MAX_SPEED = 100.0;
const float MIN_ACCELERATION = 0.5;


//variables for the rotary encoder function
int counter = 150; 
int aState;
int aLastState;

//variables for steering wheel FFB
int turn_lr = 0;
int motorResist = 0;

char currentGear = 'p';

//global variable to store the value of the acceleration pedal
double acceleration = 0.0;
double brake = 0.0;
double velocity = 0.0;

int guiHelper = 0;

// UDP
 WiFiUDP Udp;

// Packet struct for sending gear, velocity (vel), and angle of turn (turn)
struct UdpPacket{
  char gear = 'p';
  double vel = 0.0;
  int turn = 0;
}packet; // Creates a single instance of the struct called packet

// Creates packetBuffer to send with UDP Packet containing the struct
char packetBuffer[sizeof(packet)];



void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);

  //Digital pins for the push buttons
  pinMode(3,INPUT_PULLDOWN);
  pinMode(4,INPUT_PULLDOWN);
  pinMode(5,INPUT_PULLDOWN);

  //Digital pins for the rotary encoder
  pinMode(ENC_A,INPUT);
  pinMode(ENC_B,INPUT);

  //Digital pins for the DC motor control
  pinMode(pwmA,OUTPUT); 
  pinMode(STBY,OUTPUT); 
  pinMode(AIN1,OUTPUT); 
  pinMode(AIN2,OUTPUT);

  // Gas Pedal Potentiometer
  pinMode (GAS, INPUT);

  // Break Pedal Potentiometer
  pinMode (BRAKE, INPUT);

  //attachInterrupt(digitalPinToInterrupt(ENCA),readTurn,RISING);
  

  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  //check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }
  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println("Please upgrade the firmware");
  }
  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(WIFI_SSID);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(WIFI_SSID, WIFI_PASS);  
    // wait 10 seconds for connection:
    delay(10000);
  }

  Serial.println("Connected to wifi");
  printWifiStatus();
  Serial.println("\nStarting connection to server...");
  printWifiStatus();
  
  // if you get a connection, report back via serial:
  Udp.begin(UDP_PORT);

  // Reads the initial state of the outputA
   aLastState = digitalRead(ENC_A);
  
}


void loop() {
  // Retrives received packet ip for acknowledge packet
  IPAddress serverIP (10 ,144 ,113 ,245);
  
  //checking the car's gear
  setGear();
  packet.gear = currentGear;

  //reading data from pedal's potentiometers
  acceleration = analogRead(A1);
  brake = analogRead(A2);
  
  //building the packet with respect to real data
  setVelocity();
  if (packet.gear == 'r'){
    packet.vel = (map(velocity, 0.0, 100.0, 1017.0, 1300.0)/10.0);
    if(packet.vel < 101.80) packet.vel = 90.0;
  }
  if(packet.gear == 'd'){
    packet.vel = (map(velocity, 0.0, 100.0, 821.0, 600.0)/10.0);
    if(packet.vel > 82.0) packet.vel = 90.0;
  }


  //Serial.println(packet.vel);
  //noInterrupts(); // disable interrupts temporarily while reading
  
  aState = digitalRead(ENC_A); // Reads the "current" state of the outputA
  if (aState != aLastState){

     // If the outputB state is different to the outputA state, that means the encoder is rotating clockwise
    if (digitalRead(ENC_B) != aState) { 
      counter ++;
    } else {
      counter --;
    }
     
    // User is turning the steering wheel to the right
    //Serial.print("Position: ");
    //Serial.println(counter);

    if(counter > 250){counter = 250;}
    if(counter < 50){counter = 50 ;}
    
    if(counter > 155){ //Clockwise condition
      turn_lr = map(counter, 155, 250, 105, 40);
      //Serial.print("Turning: ");
      //Serial.println(turn_lr);
      rotateCCW();

    }
    if(counter < 145){ //CounterClockwise condition
      turn_lr = map(counter, 50, 145, 190, 105);
      //Serial.print("Turning: ");
      //Serial.println(turn_lr);
      rotateCW();
    }
    
  }
  packet.turn = turn_lr; 

  //interrupts(); // turn interrupts back on
  // Serial.print("Packet_turn: ");
  // Serial.println(packet.turn);
  // printPacketInfo();
  // Copys gear, velocity, and turn angle from struct into the packetBuffer
  memcpy(packetBuffer, &packet.gear, sizeof(packet.gear));
  memcpy(packetBuffer+sizeof(packet.gear), &packet.vel, sizeof(packet.vel));
  memcpy(packetBuffer+sizeof(packet.gear)+sizeof(packet.vel), &packet.turn, sizeof(packet.turn));
         
  //Opens a packet, writes to the buffer, and sends the packet
  Udp.beginPacket(serverIP, UDP_PORT);
  Udp.write(packetBuffer, sizeof(packetBuffer));
  Udp.endPacket();

  guiHelper++;
  if (guiHelper ==70){
    Serial.print(currentGear);
    Serial.print(",");
    Serial.println(velocity);
    guiHelper = 0;
  }

  aLastState = aState; // Updates the previous state of the outputA with the current state
}


//Function to chage the gear with respect to three push buttons
void setGear(){
  if (digitalRead(3) == 1){
     currentGear = 'p';
   }
   if (digitalRead(5) == 1){
     currentGear = 'd';
   }
   if (digitalRead(4) == 1){
     currentGear = 'r';
   }
   //Serial.print(currentGear);
   //Serial.print(",");
}


//function to set the velocity of our RC car
void setVelocity(){
  // Maps potentiometer to acceleration values
  //acceleration = map(acceleration, 0, 1023, 60, 82);
  acceleration = acceleration / 1000;
  brake = map(brake, 0, 1023, 0, 640);
  brake = brake / 10000;
  //Serial.println(brake);

  // Accelerates car past a specefic threshold up to a max speed
  if (acceleration > MIN_ACCELERATION && velocity <= MAX_SPEED){
    velocity += acceleration*.1 - brake;
  }

   // stops car at low enough velocity
  if (velocity < .03){
    velocity = 0.0;
  }

   // Decelerates if not accelerating
  if (acceleration < MIN_ACCELERATION & velocity > .02){
    velocity -= .4 - brake;
  }
  //velocity = map(velocity, 0.0, 100.0, 82.0, 60.0);
  if (packet.gear == 'r'){
    packet.vel = (map(velocity, 0.0, 100.0, 1018.0, 1300.0)/10.0);
  }
  else{
    packet.vel = (map(velocity, 0.0, 100.0, 820.0, 600.0)/10.0);
  }

  //Serial.println(velocity);

}


void rotateCW() {
  motorResist = map(counter,0,154,255,0);
  digitalWrite(STBY,HIGH); 
  digitalWrite(AIN1,LOW); 
  digitalWrite(AIN2,HIGH);
  //Serial.print("CCW: ");
  //Serial.println(motorResist); 
  analogWrite(pwmA,motorResist); 
}

void rotateCCW() {
  motorResist = map(counter,162,316,0,255);
  digitalWrite(STBY,HIGH);
  digitalWrite(AIN1,HIGH); 
  digitalWrite(AIN2,LOW);
  //Serial.print("CW: ");
  //Serial.println(motorResist); 
  analogWrite(pwmA,motorResist);
}

void stopMotor(){
  digitalWrite(STBY,HIGH);
  digitalWrite(AIN1,LOW); 
  digitalWrite(AIN2,LOW);
}



//Function to print the status of the Wifi connection
void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your board's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
  
  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}


// Prints the packets values as well as the encoded values
void printPacketInfo(){
  Serial.print("gear= ");
  Serial.println(packet.gear);
  Serial.print("vel= ");
  Serial.println(packet.vel);
  Serial.print("turn= ");
  Serial.println(packet.turn);
  //Serial.println(packetBuffer);
  //Serial.println(sizeof(packetBuffer));
  delay(100);
}
